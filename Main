package com.demo;

import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.ToolTipManager;
import javax.swing.ImageIcon;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.NoSuchElementException;
import java.util.Stack;

public class Main extends JPanel implements TreeSelectionListener {
	private static final long serialVersionUID = 1L;
	
	private JEditorPane htmlPane;
    private JTree tree;
    private static boolean DEBUG = false;
    private static String postfix;

    public Main() {
        super(new GridLayout(1,0));

        //Create the nodes.
        DefaultMutableTreeNode top = createExpressionTree();

        //Create a tree that allows one selection at a time.
        tree = new JTree(top);
        tree.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Enable tool tips.
        ToolTipManager.sharedInstance().registerComponent(tree);

        //Set the icon for leaf nodes.
        ImageIcon tutorialIcon = createImageIcon("./middle.gif");
        if (tutorialIcon != null) {
            DefaultTreeCellRenderer renderer =
                    new DefaultTreeCellRenderer();
            //renderer.setLeafIcon(tutorialIcon);
            renderer.setClosedIcon(tutorialIcon);
            renderer.setOpenIcon(tutorialIcon);
            tree.setCellRenderer(renderer);
        } else {
            System.err.println("Tutorial icon missing; using default.");
        }

        //Listen for when the selection changes.
        tree.addTreeSelectionListener(this);

        //Create the scroll pane and add the tree to it.
        JScrollPane treeView = new JScrollPane(tree);

        //Create the HTML viewing pane.
        htmlPane = new JEditorPane();
        htmlPane.setEditable(false);
        htmlPane.setText("Binary Tree Calculator");
        JScrollPane htmlView = new JScrollPane(htmlPane);

        //Add the scroll panes to a split pane.
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPane.setTopComponent(treeView);
        splitPane.setBottomComponent(htmlView);

        Dimension minimumSize = new Dimension(100, 50);
        htmlView.setMinimumSize(minimumSize);
        treeView.setMinimumSize(minimumSize);
        splitPane.setDividerLocation(100); 

        splitPane.setPreferredSize(new Dimension(500, 300));

        //Add the split pane to this panel.
        add(splitPane);
    }

    /** Required by TreeSelectionListener interface. */
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                tree.getLastSelectedPathComponent();

        if (node == null) return;

        Object nodeInfo = node.getUserObject();
        if (node.isLeaf()) {
            displayValue(node);
        } else {
            displayValue(node);
        }
        if (DEBUG) {
            System.out.println(nodeInfo.toString());
        }
    }


    private void displayValue(DefaultMutableTreeNode node) {
        htmlPane.setText(infix(node));
    }


    private String infix(DefaultMutableTreeNode node) {
        if (node == null) {
            throw new NoSuchElementException("The root is empty, the tree has not yet been constructed.");
        }
        final StringBuilder infix = new StringBuilder();
        inOrder(node, infix);
        return infix.toString();
    }

    private void inOrder(DefaultMutableTreeNode node, StringBuilder infix) {
        if (node != null) {
            if (!node.isLeaf())
                inOrder((DefaultMutableTreeNode) node.getChildAt(0), infix);
            infix.append(node.getUserObject());
            if (!node.isLeaf())
                inOrder((DefaultMutableTreeNode) node.getChildAt(1), infix);
        }
    }

    public DefaultMutableTreeNode createExpressionTree() {
        final Stack<DefaultMutableTreeNode> nodes = new Stack<>();
        for (int i = 0; i < postfix.length(); i++) {
            char ch  = postfix.charAt(i);
            if (isOperator(ch)) {
                DefaultMutableTreeNode rightNode = nodes.pop();
                DefaultMutableTreeNode leftNode = nodes.pop();
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(ch, true);
                node.insert(leftNode, 0);
                node.insert(rightNode, 1);
                nodes.push(node);
            } else {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(ch, true);
                nodes.add(node);
            }
        }
        return nodes.pop();
    }

    private boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }

    /** Returns an ImageIcon, or null if the path was invalid. */
    private static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = Main.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("JTreeDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
        Main newContentPane = new Main();
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.

        postfix = args[0];

        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}

